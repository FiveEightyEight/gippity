---
import Layout from "../layouts/Layout.astro";
import Chat from "../components/Chat.tsx";
import ChatHistory from "../components/ChatHistory.tsx";
const apiUrl = import.meta.env.PUBLIC_API_URL;
---

<Layout title="Gippity">
    <main class="grid grid-cols-12 h-[100dvh] overflow-hidden">
        <div class="col-span-3">
            <ChatHistory client:idle />
        </div>
        <div class="col-span-9 h-full">
            <Chat client:idle />
        </div>

    </main>
</Layout>

<style is:global>
    .chat-history-shadow {
        box-shadow: -26px 0px 45px -18px rgba(255, 255, 255, 0.87) inset;
        -webkit-box-shadow: -26px 0px 45px -18px rgba(255, 255, 255, 0.87) inset;
        -moz-box-shadow: -26px 0px 45px -18px rgba(255, 255, 255, 0.87) inset;
    }
</style>

<script is:inline>
    let chat = {};
    /** @type {Array<{role: string, content: string}>} */
    let messages = [];
    /** @type {string[]} */
    let models = [];
    /** @type {string} */
    let currModel = "";
    /** @type {HTMLSelectElement | null} */
    let modelSelection = null;
    const USER = "user";
    const SYSTEM = "system";
    const ASSISTANT = "assistant";
    let loading = false;

    function checkAuth() {
        const token = getAccessToken();
        if (!token) {
            window.location.href = "/register";
        }
        return !!token;
    }

    window.addEventListener("DOMContentLoaded", async () => {
        const { getAccessToken } = await import('../stores/token');
        const hasToken = checkAuth();
        if (!hasToken) return;

        modelSelection = document.getElementById("model-selection");
        const token = getAccessToken();
        fetch(`${apiUrl}/models`, {
            headers: {
                Authorization: `Bearer ${token}`,
            },
        })
            .then((res) => res.json())
            .then((res) => setModels(res))
            .catch((err) => {
                console.log("error calling api", err);
            });
        modelSelection?.addEventListener("change", () => {
            currModel = modelSelection?.value || "";
        });
        const chatButton = document.getElementById("chat-button");
        chatButton?.addEventListener("mousedown", () => {
            if (!currModel || currModel === "") {
                console.log("please select a model");
                return;
            }
            const chatInput = document.getElementById("chat-input");
            const content = chatInput?.value || "";
            messages.push({
                role: USER,
                content: content,
            });
            if (chatInput) chatInput.value = "";
            callModel();
        });
    });

    /** @param {Object} apiRes
     *  @param {string[]} apiRes.models */
    function setModels(apiRes) {
        if (!apiRes) {
            console.log("setModels called with empty object");
        }
        const { models: m } = apiRes;
        if (!m || !Array.isArray(m)) {
            console.log(
                "setModels unable to set any models due to missing models",
            );
        }
        let innerSelectionHTML = `
        <option value="" />
    `;
        for (let model of m) {
            innerSelectionHTML += `
            <option value="${model}">
                ${model}
            </option>
        `;
        }
        if (modelSelection) modelSelection.innerHTML = innerSelectionHTML;
        models = m;
    }

    function callModel() {
        if (!currModel || currModel === "") {
            console.log("please select a model");
            return;
        }
        const payload = {
            model: currModel,
            messages: messages,
        };
        loading = true;
        fetch(`${apiUrl}/chat`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(payload),
        })
            .then((r) => r.json())
            .then((res) => {
                console.log(`SERVER REPLY`, res);
            })
            .catch((err) => {
                console.log("error calling chat");
            });
    }
</script>
